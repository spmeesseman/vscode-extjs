# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
   branches:
     include:
     - master
     - greenkeeper/*

#
# pool:
#   vmImage: 'Ubuntu-16.04'
#
# steps:
# - task: NodeTool@0
#   inputs:
#     versionSpec: '10.x'
#   displayName: 'Install Node.js'
#
# - script: |
#     npm install
#     npm run build
#   displayName: 'npm install and build'
#

jobs:
  - job: Windows
    strategy:
      matrix:
        Code50:
          CODE_VERSION: '1.50.0'
        CodeCurrent:
          CODE_VERSION:
        CodeInssiders:
          CODE_VERSION: 'insiders'
    pool:
      name: Hosted VS2017
      demands: npm
    steps:
      - task: NodeTool@0
        displayName: 'Use Node 10.x'
        inputs:
          versionSpec: 10.x
      - task: Npm@1
        displayName: 'Install dependencies'
        inputs:
          verbose: false
      - task: Npm@1
        displayName: 'Compile sources'
        inputs:
          command: custom
          verbose: false
          customCommand: 'run build'
      - bash: sed -i.bak 's/"\*"//g' package.json
        displayName: 'Enable full coverage'
      - task: Npm@1
        displayName: 'Run tests'
        inputs:
          command: custom
          verbose: false
          customCommand: 'run test --silent'
      - task: PublishTestResults@2
        displayName: 'Publish Test Results'
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: 'coverage/junit/*.xml'
          mergeTestResults: true
          testRunTitle: '$(Agent.OS) $(Agent.JobName)'
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish Code Coverage to Azure'
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml'
          reportDirectory: '$(System.DefaultWorkingDirectory)/coverage/lcov-report'
      - script: node_modules\.bin\codecov --disable=gcov
        displayName: 'Publish Code Coverage to Codecov'
        env:
          CODECOV_TOKEN: $(codecovToken)
  - job: Windows_Node13
    strategy:
      matrix:
        CodeCurrent:
          CODE_VERSION:
        #CodeInssiders:
        #  CODE_VERSION: 'insiders'  # 2/20/2019 - this test is causing cobertura coverage to fail
    pool:
      name: Hosted VS2017
      demands: npm
    steps:
      - task: NodeTool@0
        displayName: 'Use Node 13.x'
        inputs:
          versionSpec: 13.x
      - task: Npm@1
        displayName: 'Install dependencies'
        inputs:
          verbose: false
      - task: Npm@1
        displayName: 'Compile sources'
        inputs:
          command: custom
          verbose: false
          customCommand: 'run build'
      - bash: sed -i.bak 's/"\*"//g' package.json
        displayName: 'Enable full coverage'
      - task: Npm@1
        displayName: 'Run tests'
        inputs:
          command: custom
          verbose: false
          customCommand: 'run test --silent'
      #- task: PublishTestResults@2
      #  displayName: 'Publish Test Results'
      #  inputs:
      #    testResultsFormat: 'JUnit'
      #    testResultsFiles: 'coverage/junit/*.xml'
      #    mergeTestResults: true
      #    testRunTitle: '$(Agent.OS) $(Agent.JobName)'
      #- task: PublishCodeCoverageResults@1
      #  displayName: 'Publish Code Coverage to Azure'
      #  inputs:
      #    codeCoverageTool: Cobertura
      #    summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml'
      #    reportDirectory: '$(System.DefaultWorkingDirectory)/coverage/lcov-report'
      #- script: node_modules\.bin\codecov --disable=gcov
      #  displayName: 'Publish Code Coverage to Codecov'
      #  env:
      #    CODECOV_TOKEN: $(codecovToken)
  - job: macOS
    strategy:
      matrix:
        Code50:
          CODE_VERSION: '1.50.0'
        CodeCurrent:
          CODE_VERSION:
        CodeInssiders:
          CODE_VERSION: 'insiders'
    pool:
      name: Hosted macOS
      demands: npm
    steps:
      - task: NodeTool@0
        displayName: 'Use Node 10.x'
        inputs:
          versionSpec: 10.x
      - task: Npm@1
        displayName: 'Install dependencies'
        inputs:
          verbose: false
      - task: Npm@1
        displayName: 'Compile sources'
        inputs:
          command: custom
          verbose: false
          customCommand: 'run build'
      - bash: sed -i.bak 's/"\*"//g' package.json
        displayName: 'Enable full coverage'
      - task: Npm@1
        displayName: 'Run tests'
        inputs:
          command: custom
          verbose: false
          customCommand: 'run test --silent'
      - task: PublishTestResults@2
        displayName: 'Publish Test Results'
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: 'coverage/junit/*.xml'
          mergeTestResults: true
          testRunTitle: '$(Agent.OS) $(Agent.JobName)'
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish Code Coverage to Azure'
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml'
          reportDirectory: '$(System.DefaultWorkingDirectory)/coverage/lcov-report'
      - script: node_modules/.bin/codecov --disable=gcov
        displayName: 'Publish Code Coverage to Codecov'
        env:
          CODECOV_TOKEN: $(codecovToken)
  - job: Linux
    strategy:
      matrix:
        #Code50:
        #  CODE_VERSION: '1.50.0' # building vscode in azure pipelines is a piece of s***
        CodeCurrent:
          CODE_VERSION:
        CodeInssiders:
          CODE_VERSION: 'insiders'
    pool:
      name: Hosted Ubuntu 1604
      demands: npm
    steps:
      - task: NodeTool@0
        displayName: 'Use Node 10.x'
        inputs:
          versionSpec: 10.x
      - task: Npm@1
        displayName: 'Install dependencies'
        inputs:
          verbose: false
      - task: Npm@1
        displayName: 'Compile sources'
        inputs:
          command: custom
          verbose: false
          customCommand: 'run build'
      - script: |
          set -e
          /usr/bin/Xvfb :10 -ac >> /tmp/Xvfb.out 2>&1 &
          disown -ar
        displayName: 'Start xvfb'
      - bash: sed -i.bak 's/"\*"//g' package.json
        displayName: 'Enable full coverage'
      - task: Npm@1
        displayName: 'Run tests'
        inputs:
          command: custom
          verbose: false
          customCommand: 'run test --silent'
        env:
          DISPLAY: :10
      - task: PublishTestResults@2
        displayName: 'Publish Test Results'
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: 'coverage/junit/*.xml'
          mergeTestResults: true
          testRunTitle: '$(Agent.OS) $(Agent.JobName)'
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish Code Coverage to Azure'
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml'
          reportDirectory: '$(System.DefaultWorkingDirectory)/coverage/lcov-report'
      - script: node_modules/.bin/codecov --disable=gcov
        displayName: 'Publish Code Coverage to Codecov'
        env:
          CODECOV_TOKEN: $(codecovToken)
  - job: Linux_Node12
    strategy:
      matrix:
        CodeCurrent:
          CODE_VERSION:
        #CodeInssiders:
        #  CODE_VERSION: 'insiders'
    pool:
      name: Hosted Ubuntu 1604
      demands: npm
    steps:
      - task: NodeTool@0
        displayName: 'Use Node 12.x'
        inputs:
          versionSpec: 12.x
      - task: Npm@1
        displayName: 'Install dependencies'
        inputs:
          verbose: false
      - task: Npm@1
        displayName: 'Compile sources'
        inputs:
          command: custom
          verbose: false
          customCommand: 'run build'
      - script: |
          set -e
          /usr/bin/Xvfb :10 -ac >> /tmp/Xvfb.out 2>&1 &
          disown -ar
        displayName: 'Start xvfb'
      - bash: sed -i.bak 's/"\*"//g' package.json
        displayName: 'Enable full coverage'
      - task: Npm@1
        displayName: 'Run tests'
        inputs:
          command: custom
          verbose: false
          customCommand: 'run test --silent'
        env:
          DISPLAY: :10
      #- task: PublishTestResults@2
      #  displayName: 'Publish Test Results'
      #  inputs:
      #    testResultsFormat: 'JUnit'
      #    testResultsFiles: 'coverage/junit/*.xml'
      #    mergeTestResults: true
      #    testRunTitle: '$(Agent.OS) $(Agent.JobName)'
      #- task: PublishCodeCoverageResults@1
      #  displayName: 'Publish Code Coverage to Azure'         
      #  inputs:
      #    codeCoverageTool: Cobertura
      #    summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml'
      #    reportDirectory: '$(System.DefaultWorkingDirectory)/coverage/lcov-report'
      - script: node_modules/.bin/codecov --disable=gcov
        displayName: 'Publish Code Coverage to Codecov'
        env:
          CODECOV_TOKEN: $(codecovToken)
  - job: Release
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    #condition: succeeded()
    dependsOn:
    - Windows
    - Windows_Node13
    - macOS
    - Linux
    - Linux_Node12
    pool:
      name: Hosted Ubuntu 1604
      demands: npm
    steps:
      - task: NodeTool@0
        displayName: 'Use Node 12.x'
        inputs:
          versionSpec: 12.x
      - task: Npm@1
        displayName: 'Install dependencies'
        inputs:
          verbose: false
      - task: Npm@1
        displayName: 'Compile sources'
        inputs:
          command: custom
          verbose: false
          customCommand: 'run build-webpack'
      - script: |
          set -e
          /usr/bin/Xvfb :10 -ac >> /tmp/Xvfb.out 2>&1 &
          disown -ar
        displayName: 'Start xvfb'
      - task: Npm@1
        displayName: 'Run semantic-release'
        inputs:
          command: custom
          verbose: false
          customCommand: 'run semantic_release-release --allow-same-version'
        env:
          VSCE_TOKEN: $(vsceToken)
          GH_TOKEN: $(githubToken)
          NPM_TOKEN: $(npmToken)
          GIT_AUTHOR_EMAIL: $(gitEmail)
          GIT_COMMITTER_EMAIL: $(gitEmail)
          GIT_AUTHOR_NAME: $(gitName)
          GIT_COMMITTER_NAME: $(gitName)
