/**
 * @class Ext.ux.ToolkitUtilities
 *
 * Toolkiit-specific Utility Singleton
 * 
 * @singleton
 * 
 */
Ext.define('Ext.ux.ToolkitUtilities', 
{
    pExtClientVersion: '199',
    
    alias: 'TkUtils', 
    alternateClassName: 'TkUtils',
    singleton: true,

    current_mask: null,
    current_masks: [],
    
    mask: function(cmp, msg, store)
    {
        var mask = null;
        
        if (!msg)
            msg = 'Loading...';
        
        mask = new Ext.LoadMask(
        {
            target: cmp ? cmp : Ext.ComponentQuery.query('app-main')[0],
            msg: msg,
            store: store
        });
        
        if (mask && !store)
        {
            mask.show();
            this.current_mask = mask;
        }

        return mask;
    },
    
    
    unmask: function(mask)
    {
        //
        // Add try/catch - 
        // Reference ticket #1273:  Client Error - Cannot read property 'removeCls' of null
        // When calling hide(), this exception is randomly triggered.  Probably on windows that
        // are masked and closed around same time race condition??
        //
        // 11/29/20 - add check for 'mask.destroyed'
        //
        try
        {
            if (mask && mask.target && !mask.destroyed)
            {
                mask.hide();
                mask.destroy();
            }
            else if (this.current_mask && this.current_mask.target && !this.current_mask.destroyed)
            {
                this.current_mask.hide();
                this.current_mask.destroy();
            }
        }
        catch(e) {}

        this.current_mask = null;
    },
    
    
    collapseRowWidgetRow: function(grid, rowIndex)
    {
        var store = grid.getStore();
        for (var p in grid.plugins)
        {
            if (grid.plugins[p].ptype == 'rowwidget')
            {
                var rowExpander = grid.plugins[p],
                    nodes = rowExpander.view.getNodes(),
                    node = Ext.fly(nodes[rowIndex]);
                if (!node.hasCls(rowExpander.rowCollapsedCls)) 
                {
                    rowExpander.toggleRow(rowIndex, store.getAt(rowIndex));
                }
                break;
            }
        }
    },
    
    getRowWidgetBody: function(grid, rowIndex)
    {
        for (var p in grid.plugins)
        {
            if (grid.plugins[p].ptype == 'rowwidget')
            {
                var rowExpander = grid.plugins[p],
                    nodes = rowExpander.view.getNodes();
                return nodes[rowIndex];
            }
        }
        return null;
    },


    getRowWidgetCmp: function(grid, rowIndex)
    {
        var body = TkUtils.getRowWidgetBody(grid, rowIndex),
            cmp = null;
        if (body)
        {
            cmp = Ext.getCmp(Ext.get(body).id);
        }
        return cmp;
    },


    expandAllRowWidgetRows: function(grid)
    {
        var store = grid.getStore();
        for (var p in grid.plugins)
        {
            if (grid.plugins[p].ptype == 'rowwidget')
            {
                var rowExpander = grid.plugins[p],
                    nodes = rowExpander.view.getNodes(),
                    node;
                for (var i = 0; i < nodes.length; i++) 
                {
                    node = Ext.fly(nodes[i]);
                    if (node.hasCls(rowExpander.rowCollapsedCls)) 
                    {
                        rowExpander.toggleRow(i, store.getAt(i));
                    }
                }
            }
        }
    },
    
    expandRowWidgetRow: function(grid, rowIndex)
    {
        var store = grid.getStore();
        for (var p in grid.plugins)
        {
            if (grid.plugins[p].ptype == 'rowwidget')
            {
                var rowExpander = grid.plugins[p],
                    nodes = rowExpander.view.getNodes(),
                    node = Ext.fly(nodes[rowIndex]);
                if (node.hasCls(rowExpander.rowCollapsedCls)) 
                {
                    rowExpander.toggleRow(rowIndex, store.getAt(rowIndex));
                    return true;
                }
            }
        }
        return false;
    },

    toggleRowWidgetRow: function(grid, rowIndex)
    {
        var store = grid.getStore();
        for (var p in grid.plugins)
        {
            if (grid.plugins[p].ptype == 'rowwidget')
            {
                var rowExpander = grid.plugins[p],
                    nodes = rowExpander.view.getNodes(),
                    node = Ext.fly(nodes[rowIndex]);
                if (node.hasCls(rowExpander.rowCollapsedCls)) 
                {
                    rowExpander.toggleRow(rowIndex, store.getAt(rowIndex));
                    return true;
                }
                rowExpander.toggleRow(rowIndex, store.getAt(rowIndex));
                break;
            }
        }
        return false;
    }

});
